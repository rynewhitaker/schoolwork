#ifndef ULISTTYPE_H
#define ULISTTYPE_H
#include "ListType.h"
#include<iostream>

class UListType: public ListType<T> {
   public:
      UListType(size_t = 10);
      virtual bool insert (const T&);
      virtual bool erase (const T&);
      virtual bool find (const T&) const;
};

template <class T>
bool UListType<T>::insert(const T& item) {
   bool result = false;
   bool goodtogo = true;

   if (this -> full()) {
      try {
         T *temp = new T[2 * this -> capacity];
	 this -> capacity = 2 * this -> capacity;
	 for (size_t i = 0; i < this -> count; ++i) {
            temp[i] = this -> list[i];
	 }
	 delete [] this -> list;
	 this -> list = temp;
      }
      catch (std::bad_alloc) {
         goodtogo = false;
      }
   }
   if (goodtogo) {
      this -> list[this -> count++] = item;
      result = true;
   }
   return result;
}

template <class T>
UListType<T>::UListType(size_t n): ListType<T>(n) {
}

template <class T>
bool UListType<T>::erase(const T& item) {
   bool result = false;

   if (!this -> empty()) {
      size_t i = 0;
      while (i < this -> count && item != this -> list[i]) {
         ++i;
      }
      if (i < this -> count) {
         this -> list[i] = this -> list[--this -> count];
	 result = true;
      }
   }
   return result;
}

template <class T>
bool UListType<T>::find(const T& item) const {
   size_t i = 0;
   while (i < this -> count && item != this -> list[i]) {
      ++i;
   }
   return (i < this -> count);
}

#endif
