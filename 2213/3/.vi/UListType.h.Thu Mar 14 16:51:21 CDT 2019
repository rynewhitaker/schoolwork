#ifndef ULISTTYPE_H
#define ULISTTYPE_H

#include "ListType.h"

template <class T>
class UListType:public ListType<T> {
   public:
      bool insert(const T&);
      //bool find(const T&) const;
};

/*
template <class T>
bool UListType<T>::find (const T& item) const {
   NodeType<T>* temp = this -> head;
   while (temp != NULL && temp -> info != item) {
      temp = temp -> link;
   }
   return temp != NULL;
}
*/

template <class T>
bool UListType<T>::insert(const T& item) {
   NodeType<T> *temp;
   try {
      temp = new NodeType<T>;
   }
   catch (std::bad_alloc be) {
      return false;
   }
   temp -> info = item;
   temp -> link = this -> head;
   this -> head = temp;
   ++this -> count;
   return true;
}

#endif
