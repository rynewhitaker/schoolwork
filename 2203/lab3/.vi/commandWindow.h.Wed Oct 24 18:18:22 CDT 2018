/* 
   commandWindow.h  -- Program to  ... (Fill this in) ...

   Author: Ryne Whitaker

   Modification History
   Date        Action
   10/17/18  -- Original version

   ID code: 5Ajt7FvyGJVdw
*/
using namespace std;
#ifndef COMMAND_WINDOW
#define COMMAND_WINDOW
#include <ncurses.h>
#include <sstream>
#include <string>
using namespace std;
class CommandWindow {
private:
   WINDOW *command;
   string contents;
public:
   // Create a CommandWindow, positioned at the next-to-bottom line
   // of the screen, and the full width of the screen.
   CommandWindow() {
   int r, c;
   getmaxyx(stdscr, r, c);
   // create new window two lines from bottom on left hand side, with height of one and width of c
   WINDOW * command = newwin(1, c, r-2, 0);
   waddstr(command, "Command: ");
   }
  
   // Append string s onto the command window string and then display it
   void write (string s) {
   
   }
  
   // Append character ch onto the command window string and then display it
   void write (char ch) {
   
   }  
  
   // Append integer n onto the command window string and then display it
   void write (int n) {
   
   }  
  
   // Clear the command window and redisplay any prompt
   void clear() {
   command.clear();
   }
  
   // Pause in the command window
   void pause() {
   wgetch(command);
   }
  
   // Read an integer from the command window
   int readInt() {
   int value = atof(line);  // alphabetic to float (double)
   return value;
   }
  
   // Read a double from the command window
   double readDouble() {
   double value = atof(line);  // alphabetic to float (double)
   return value;
   }
  
   // Read a string from the command window
   string readString() {
   char line[N]; //  N = max number of expected characters in a command
   wgetnstr(command,line,N-1);  // N-1 because you must leave one space for NULL
   return line; 
   }

};
#endif

