/*
mainc.cc  -- Program to test WindowBuffer

Author: Ryne Whitaker

Modification History
Date        Action
10/02/18  -- Original version

*/
using namespace std;
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include "lab2.cc"

void check (string msg, bool cond) {
   cout << msg << ": ";
   if (cond) 
      cout << "ok";
   else
      cout << "failed!";
   cout << endl; 
}

int main () {
   // Create window buffers
   WindowBuffer wb1;
   WindowBuffer wb2(10, 20); 
   string msg;

   msg = "Test 1a: After initializing a window buffer the row and col should both be 0";
   check(msg, wb1.rowNumber() == 0  && wb1.colNumber() == 0); 
   msg = "Test 1b: After initializing a window buffer the row and col should both be 0";
   check(msg, wb2.rowNumber() == 0  && wb2.colNumber() == 0); 
   cout << endl;

   msg = "Test 2: After initializing an empty window buffer number of rows = 1, number of cols =0";
   check(msg, wb1.numberOfRows() == 1  && wb1.colNumber() == 0); 
   cout << endl;

   msg = "Test 3a: After moveto (5,7) the row = 5 and col = 7";
   wb1.moveTo(5,7);
   check(msg, wb1.rowNumber() == 5  && wb1.colNumber() == 7); 
   msg = "Test 3b: After moveto (5,7) the row = 5 and col = 7";
   wb2.moveTo(5,7);
   check(msg, wb2.rowNumber() == 5  && wb2.colNumber() == 7); 
   cout << endl;
   // You need to test the other operations in a similar fashion
   // ...

   msg = "Test 4a: After writing a string of length 5 at (3,7), row = 3, col = 12";
   wb1.moveTo(3,7); wb1.write("doggy");
   check (msg, wb1.rowNumber() == 3  && wb1.colNumber() == 12); 
   msg = "Test 4b: After writing a string of length 5 at (3,7), row = 3, col = 12";
   wb2.moveTo(3,7); wb2.write("puppy");
   check (msg, wb2.rowNumber() == 3  && wb2.colNumber() == 12); 
   cout << endl;

   msg = "Test 5a: After inserting a string of length 5 at (3,7), row = 3, col = 12";
   check (msg, wb1.rowNumber() == 3  && wb1.colNumber() == 12); 
   msg = "Test 5b: After inserting a string of length 5 at (3,7), row = 3, col = 12";
   check (msg, wb2.rowNumber() == 3  && wb2.colNumber() == 12); 
   cout << endl;

   msg = "Test 6a: Row 3 in wb1 should contain \"       doggy\"";
   check(msg, wb1.getRow() == "       doggy"); 
   msg = "Test 6b: Row 3 in wb2 should contain \"       puppy        \"";
   check(msg, wb2.getRow() == "       puppy        ");  
   cout << endl;

   msg = "Test 7a: after inserting \"apple\" at (4,7), line should read \"       apple\"";
   wb1.moveTo(4,7); 
   wb1.insert("apple");
   check(msg, wb1.getRow() == "       apple");
   msg = "Test 7b: after inserting \"manzana\" at (4,7), line should read \"       manzana             \""; 
   wb2.moveTo(4,7); 
   wb2.insert("manzana");
   check(msg, wb2.getRow() == "       manzana             ");
   cout << endl;

   msg = "Test 8a: after deleting \"gy\" from row 3 of wb1, it should contain \"       dog\"";
   wb1.moveTo(3,10);
   wb1.delToEoln();
   check(msg, wb1.getRow() == "       dog");
   msg = "Test 8b: after deleting \"py\" and spaces after \"puppy\" in row 3 of wb2, it should contain \"       pup\"";
   wb2.moveTo(3,10);
   wb2.delToEoln();
   check(msg, wb2.getRow() == "       pup");
   cout << endl;   

   msg = "Test 9a: After deleting row 3, the row should be empty and r should reference row 4";
   wb1.moveTo(3,0);
   wb1.delRow();
   check(msg, wb1.rowNumber() == 4 && wb1.buffer[3] == "");
   msg = "Test 9b: After deleting row 3, the row should be empty and r should reference row 4";
   wb2.moveTo(3,0);
   wb2.delRow();
   check(msg, wb2.rowNumber() == 4 && wb2.buffer[3] == "");
   cout << endl;

   msg = "Test 10a: after deleting \"le\" from row 4 of wb1, it should contain \"       app\"";
   wb1.moveTo(4,10);
   wb1.clearToEoln();
   check(msg, wb1.getRow() == "       app");
   msg = "Test 10b: after deleting \"py\" and spaces after \"manzana\" in row 4 of wb2, it should contain \"       man\"";
   wb2.moveTo(4,10);
   wb2.clearToEoln();
   check(msg, wb2.getRow() == "       man");
   cout << endl;

   msg = "Test 11a: rowNumber() should equal 4";
   wb1.moveTo(4,0);
   check(msg, wb1.rowNumber() == 4);
   msg = "Test 11b: rowNumber() should equal 4";
   wb2.moveTo(4,0);
   check(msg, wb2.rowNumber() == 4);
   cout << endl;

   msg = "Test 12a: colNumber() should equal 3";
   wb1.moveTo(4,3);
   check(msg, wb1.colNumber() == 3);
   msg = "Test 12b: colNumber() should equal 3";
   wb2.moveTo(4,3);
   check(msg, wb2.colNumber() == 3);
   cout << endl;

   msg = "Test 13a: numberOfRows() should equal 6";
   wb1.moveTo(4,3);
   check(msg, wb1.numberOfRows() == 6);
   msg = "Test 13b: numberOfRows() should equal 10";
   wb2.moveTo(4,3);
   check(msg, wb2.numberOfRows() == 10);
   cout << endl;

   msg = "Test 14a: numberOfCols() should equal 10 (because we used delToEoln)";
   wb1.moveTo(4,3);
   check(msg, wb1.numberOfCols() == 10);
   msg = "Test 14b: numberOfCols() should equal 10 (because we used delToEoln)";
   wb2.moveTo(4,3);
   check(msg, wb2.numberOfCols() == 10);
   cout << endl;

   wb1.moveTo(5,0);
   wb1.write("doggy");
   msg = "Test 15a: after inserting row at (5,0), everything from row 5 on is shifted down, so row 6 contains \"doggy\" and row 5 contains \"birds\".";
   wb1.insertRow("birds");
   check(msg, wb1.getRow() == "doggy  " && wb1.buffer[5] == "birds");
   wb2.moveTo(5,0);
   wb2.write("doggy");
   msg = "Test 15b: after inserting row at (5,0), everything from row 5 on is shifted down, so row 6 contains \"doggy\" and row 5 contains \"birds\".";
   wb2.insertRow("birds");
   check(msg, wb2.getRow() == "doggy                    " && wb2.buffer[5] == "birds                   ");
   cout << wb2.buffer[5].size() << endl;
   cout << wb2.buffer[6].size() << endl;
   cout << endl;

   msg = "Test 16a: After clearing the entire buffer, buffer.size() == 0";
   wb1.clear();
   check(msg, wb1.buffer.size() == 0);
   msg = "Test 16b: After clearing the entire buffer, buffer.size() == 0";
   wb2.clear();
   check(msg, wb2.buffer.size() == 0);

   return 0;

}
