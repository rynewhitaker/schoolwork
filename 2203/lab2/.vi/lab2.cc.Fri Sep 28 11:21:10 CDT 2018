#include <string>
#include <vector>

// WindowBuffer -- implements a multi-line buffer that can be written and read
struct WindowBuffer {

   /* Data structure for holding lines for a window */
   vector <string> buffer;
   int r, c;  // current write point

   /* Operations for manipulating a WindowBuffer */

   // WindowBuffer -- create an WindowBuffer with one empty line
   WindowBuffer () {
      buffer = vector<string>(); // create the buffer, with no strings
      moveTo(0,0);  
   }

   // WindowBuffer -- create an WindowBuffer with rows lines, each with cols spaces
   WindowBuffer (int rows, int cols) {
   }

   // moveTo  -- Expands buffer to allow writing at (row,col)
   void moveTo(int row, int col) {
   }

   // insertRow -- inserts str before the current row
   void insertRow (string str) {
   }

   // insert -- inserts str at current location
   void insert (string str) {
   } 

   // write -- overwrites str at current location
   void write (string str) {
   } 

   // clear -- remove all lines from the buffer
   void clear() {
   }

   // clearToEoln -- remove all chars from pos (r,c) to end of line
   void clearToEoln() {
   }

   // delRow -- delete current row; r then reference next row
   void delRow() {
   }

   // delToEoln -- delete from current column to the end of line
   void delToEoln() {
   }

   // getRow -- get row r
   string getRow() {
   
   // numberOfRows -- return the number of rows in the buffer
   }
   int numberOfRows() {  
   }

   // numberOfCols -- return the length of the current line
   int numberOfCols() {  
   }

   // rowNumber -- return the row number of the current write position
   int rowNumber() {  
   
   // colNumber -- return the col number of the current write position
   int colNumber() {  
   }
};
 
