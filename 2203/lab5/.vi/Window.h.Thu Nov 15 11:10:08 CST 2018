#ifndef WINDOW_H
#define WINDOW_H
// Window.h file -- 
#include <ncurses.h>
#include <sstream>
#include <string>
#include <vector>

int numRows() { int r,c; getmaxyx(stdscr,r,c); return r; }
int numCols() { int r,c; getmaxyx(stdscr,r,c); return c; }
class Window {
protected:
   string contents;
   WINDOW *window ;
   static vector <Window *> windowList;
public:
   Window (int rows, int cols, int r, int c, string initialContents) {
      window = newwin(rows, cols, r, c);
      contents = initialContents;
      waddstr(window,contents.c_str() );
      windowList.push_back(this);
      wrefresh(window);
   }
   void write ( string s) {
      contents += s;
      wmove(window, 0, 0);
      wclrtoeol(window);
      waddstr(window,contents.c_str());
      wrefresh(window);
   }
   void write (double d) {
      stringstream ss;
      ss << d;
      string s = ss.str();
      write (s);   // call the string version
   }  

   void write (string s, int n) {
      write(s);
      write(":");
      write(n);
   }
   void clear() {
      contents = "";
      write("");
   }
   void pause() {
      wgetch(window);
   }

   virtual void hide() {
      int i;
      for (i = 0; i < windowList.size() && windowList[i] != window; i++);
      if (i < windowList.size()){
         windowList.erase(windowList.begin() + i);
         wclear(window);
	 wrefresh(window);
      }
      refreshAll();
   }

   virtual void show() {
      refreshAll();
   }

   virtual void refresh() {
      wmove(window, 0, 0);
      waddstr(window, contents.c_str());
      wrefresh(window);
   }

   static void refreshAll() {
      for (auto window:windowList) {
	      window->refresh();
      }
   }

};
#endif
